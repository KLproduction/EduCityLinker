generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  favoriteIds           String[]               @db.ObjectId
  listing               Listing[]
  enrollments           Enrollment[]
  organization          Organization[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Organization {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  description            String?
  logo                   String?
  coverPhoto             String?
  gallery                String[]      @default([])
  feature                String[]      @default([])
  facility               String[]      @default([])
  accommodationTypes     String
  roomTypes              String?
  roomAmenities          String[]      @default([])
  location               String
  lat                    Float
  lng                    Float
  distanceOfAmenities    Int?
  rating                 Float
  ratingDescription      String?
  amenityGallery         String[]      @default([])
  lessonDuration         Int
  studentMinAge          Int
  studentMaxAge          Int
  averageStudentPerClass Int
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  listings               Listing[]     @relation("OrganizationListings")
  userId                 String        @db.ObjectId
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  nationalities          Nationality[]
  socialMedia            SocialMedia[]

  @@map("organizations")
}

model Nationality {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  nation         String
  count          Int
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("nationalities")
}

model SocialMedia {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  facebook       String?
  instagram      String?
  website        String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.ObjectId
}

model Listing {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  createdAt      DateTime @default(now())
  courseType     String
  courseLevels   String
  ageGroups      String
  durationWeeks  Int
  maxStudents    Int
  price          Int
  userId         String   @db.ObjectId
  organizationId String   @db.ObjectId

  organization Organization? @relation("OrganizationListings", fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]

  @@map("listings")
}

model Enrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String   @db.ObjectId
  userId     String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
